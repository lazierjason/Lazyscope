<?xml version="1.0" encoding="utf-8"?>
<stream:StreamItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" 
						   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:stream="com.lazyfeed.stream.*"
						   rollOver="clearHighlight(); onOver();" rollOut="onOut();"
						   useHandCursor="true" click="onClick(true)" xmlns:lazyfeed="com.lazyfeed.*" autoDrawBackground="true">
	
	<fx:Script>
		<![CDATA[
			import com.lazyfeed.Base;
			import com.lazyfeed.CachedImage;
			import com.lazyfeed.Util;
			import com.lazyfeed.entry.BlogEntry;
			import com.lazyfeed.entry.StreamEntry;
			
			import mx.events.FlexEvent;
			
			override public function set data(value:Object):void
			{
				try{
					if (!value || !value.link) {
						try{
							imageContainer.removeAllElements();
							displayDescription.removeAllElements();
							title.text = null;
							description.text = null;
						}catch(err:Error) {
							trace(err.getStackTrace(), 'set data render blogInFavoriteLink');
						}
						
						super.data = value;
						return;
					}
					var e:StreamEntry = value as StreamEntry;
					
					if (super.data && StreamEntry(super.data).sid == e.sid) return;
					super.data = value;
					
					e.renderer = this;
					
					opaqueBackground = e.isUpdated?0xF4FAFD:null;
					//setStyle('alternatingItemColors', e.isUpdated?bgcolorN:bgcolor);
					
					if (e.published && e.published.getTime() > 0)
						timeStr.text = Util.toIntervalString(e.published.getTime()/1000);
					else
						timeStr.text = '';
					
					if (!e.imageElement && (!imageCandidates || imageCandidates.length <= 0)) {
						imageCandidates = Util.extractImageURL(e.displayContent?e.displayContent:e.content);
						if (imageCandidates && imageCandidates.length > 0) {
							if (e.image) {
								var p:int = imageCandidates.indexOf(e.image);
								if (p >= 0)
									imageCandidates.splice(p, 1);
							}else{
								e.image = imageCandidates.shift();
							}
						}
					}
					
					if (!e.imageElement && e.image) {
						var thisObj:Object = this;
						
						e.imageElement = new CachedImage;
						e.imageElement.maxWidth = 130;
						e.imageElement.maxHeight = 100;
						//e.imageElement.cachePolicy = 'on';
						e.imageElement.source = e.image;
						
						e.imageElement.addEventListener(FlexEvent.READY, imgComplete, false, 0, true);
						e.imageElement.addEventListener(SecurityErrorEvent.SECURITY_ERROR, imgError, false, 0, true);
						e.imageElement.addEventListener(IOErrorEvent.IO_ERROR, imgError, false, 0, true);
					}else if (e.imageElement) {
						if (imageContainer.numElements > 0)
							imageContainer.removeAllElements();
						imageContainer.addElement(e.imageElement);
					}else{
						if (imageContainer.numElements > 0)
							imageContainer.removeAllElements();
					}
					
					if (e.imageElement) {
						imageContainer.addElement(e.imageElement);
						imageContainer.width = e.imageElement.width;
						imageContainer.height = e.imageElement.height;
					}
					
					//if (e.source != 'lf') title.setStyle('color', 0xb40000);
					
					title.text = Util.htmlEntitiesDecode(e.title).replace(/\s+/g, ' ').replace(/^\s+/, '').replace(/\s+$/, '').replace(/<[^>]+>/g, '');
					blog.text = Util.htmlEntitiesDecode(e.blog && e.blog.title?e.blog.title:e.link).replace(/\s+/g, ' ').replace(/^\s+/, '').replace(/\s+$/, '');
					if (e.blog && e.blog.title)
						blog.text = blog.text.replace(/<[^>]+>/g, '');
					
					if (e.displayDescription) {
						displayDescription.visible = true;
						description.visible = false;
						displayDescription.addElement(e.displayDescription);
						description.text = '';
					}else{
						displayDescription.visible = false;
						description.visible = true;
						if (displayDescription.numElements > 0)
							displayDescription.removeAllElements();
						description.text = Util.htmlEntitiesDecode(e.description).replace(/\s+/g, ' ');
					}
					
					//				description.text = Util.htmlEntitiesDecode(e.description).replace(/\s+/g, ' ').replace(/^\s+/, '').replace(/\s+$/, '');
					//				if (!description.text)
					//					description.visible = description.includeInLayout = false;
					
					if (StreamItemRenderer.focusedData == e && e.renderer)
						StreamItemRenderer.onFocusIn(e.renderer, false);
					
				}catch(e:Error) {
					trace(e.getStackTrace(), 'set data render blog2 in favoriteLink');
					trace('rend blog', e);
				}
			}
			
			override public function onClick(forceOpen:Boolean = false):void
			{
				var tmpFocusedData:StreamEntry = StreamItemRenderer.focusedData;
				StreamItemRenderer.focusedData = null;
				
				Base.contentViewer.show(BlogEntry(super.data), this, forceOpen);
				Base.contentViewer.focused = false;
				
				StreamItemRenderer.focusedData = tmpFocusedData;
				var d:StreamEntry = StreamEntry(super.data);
				callLater(function():void {selectedData=StreamEntry(d);});
			}
			
			private function imgComplete(event:Event):void
			{
				var img:CachedImage = event.target as CachedImage;
				if (!img) return;
				if (Util.imgLoad(this, img)) {
					img.removeEventListener(FlexEvent.READY, imgComplete);
					img.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, imgError);
					img.removeEventListener(IOErrorEvent.IO_ERROR, imgError);
				}
			}
			
			private function imgError(event:Event):void
			{
				var img:CachedImage = event.target as CachedImage;
				if (!img) return;
				if (Util.imgError(this, img)) {
					img.removeEventListener(FlexEvent.READY, imgComplete);
					img.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, imgError);
					img.removeEventListener(IOErrorEvent.IO_ERROR, imgError);
					if (imageContainer.numElements > 0)
						imageContainer.removeAllElements();
				}
			}
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" gap="0">
		<s:VGroup width="100%" paddingTop="10" paddingBottom="8" paddingLeft="10" paddingRight="10" gap="4">
			<s:Label id="title" width="100%" fontWeight="bold" color="0x333333" styleName="font15" maxHeight="{title.getStyle('lineHeight')*2-1}" />
			<s:Group width="100%">
				<s:Group id="imageContainer" height="0" width="0" clipAndEnableScrolling="true" />
				<s:VGroup id="contentContainer" left="{imageContainer.width > 0 ? imageContainer.width+10 : 0}" right="0" clipAndEnableScrolling="true" gap="5">
					<s:Label id="description" width="{contentContainer.width}" color="0x777777" styleName="font12" paddingBottom="2" paddingTop="2" maxHeight="{description.getStyle('lineHeight')*5-1}" />
					<s:Group id="displayDescription" width="{contentContainer.width}" />
				</s:VGroup>
			</s:Group>
			
			<s:Group width="100%">
				<s:RichText styleName="blogName" left="0" right="0" top="3">
					<s:span id="blog" styleName="font12" fontWeight="bold" />
					<s:span whiteSpaceCollapse="preserve">  </s:span>
					<s:span id="timeStr" styleName="font11" color="0x999999" />
				</s:RichText>
			</s:Group>
		</s:VGroup>
		<s:Group id="btns" width="100%" includeInLayout="false" />
	</s:VGroup>
</stream:StreamItemRenderer>
